{
  "name": "6to5",
  "description": "Turn ES6 code into readable vanilla ES5 with source maps",
  "version": "1.10.6",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "homepage": "https://github.com/sebmck/6to5",
  "repository": {
    "type": "git",
    "url": "https://github.com/sebmck/6to5.git"
  },
  "bugs": {
    "url": "https://github.com/sebmck/6to5/issues"
  },
  "preferGlobal": true,
  "main": "lib/6to5/index.js",
  "bin": {
    "6to5": "./bin/6to5/index.js",
    "6to5-node": "./bin/6to5-node"
  },
  "keywords": [
    "harmony",
    "classes",
    "modules",
    "let",
    "const",
    "var",
    "es6",
    "transpile",
    "transpiler",
    "6to5"
  ],
  "scripts": {
    "bench": "make bench",
    "test": "make test"
  },
  "dependencies": {
    "commander": "2.4.0",
    "fs-readdir-recursive": "0.0.2",
    "lodash": "2.4.1",
    "mkdirp": "0.5.0",
    "es6-shim": "0.18.0",
    "es6-symbol": "0.1.1",
    "regexpu": "0.3.0",
    "recast": "0.8.0",
    "source-map": "0.1.40",
    "regenerator": "0.6.7",
    "chokidar": "0.10.0",
    "source-map-support": "0.2.7",
    "esutils": "1.1.4",
    "acorn-jsx": "https://github.com/sebmck/acorn-jsx/archive/master.tar.gz",
    "acorn-recast": "0.8.0-3",
    "acorn-ast-types": "0.5.3-1"
  },
  "devDependencies": {
    "istanbul": "0.3.2",
    "matcha": "0.5.0",
    "mocha": "1.21.5",
    "uglify-js": "2.4.15",
    "browserify": "6.1.0",
    "proclaim": "2.0.0",
    "rimraf": "2.2.8",
    "jshint": "2.5.6"
  },
  "readme": "<p align=\"center\">\n  <img alt=\"6to5\" src=\"http://i.imgur.com/hVl9KRw.png\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/sebmck/6to5\">\n    <img alt=\"Travis Status\" src=\"http://img.shields.io/travis/sebmck/6to5.svg?style=flat&amp;label=travis\">\n  </a>\n\n  <a href=\"https://codeclimate.com/github/sebmck/6to5\">\n    <img alt=\"Code Climate Score\" src=\"http://img.shields.io/codeclimate/github/sebmck/6to5.svg?style=flat\">\n  </a>\n\n  <a href=\"https://codeclimate.com/github/sebmck/6to5\">\n    <img alt=\"Coverage\" src=\"http://img.shields.io/codeclimate/coverage/github/sebmck/6to5.svg?style=flat\">\n  </a>\n\n  <a href=\"https://david-dm.org/sebmck/6to5\">\n    <img alt=\"Dependency Status\" src=\"http://img.shields.io/david/sebmck/6to5.svg?style=flat\">\n  </a>\n</p>\n\n**6to5** turns ES6 code into vanilla ES5, so you can use ES6 features **today.**\n\n - **Readable** - formatting is retained if possible so your generated code is as similar as possible.\n - **Extensible** - with a large range of [plugins](#plugins) and **browser support**.\n - **Lossless** - **source map support** so you can debug your compiled code with ease.\n - **Compact** - maps directly to the equivalent ES5 with **no runtime**[\\*](#generators).\n\n## Installation\n\nIt's as easy as:\n\n    $ npm install -g 6to5\n\n## Table of Contents\n\n- [Features](#features)\n- [Usage](#usage)\n  - [Plugins](#plugins)\n  - [CLI](#cli)\n  - [Node](#node-1)\n  - [Browser](#browser)\n- [Modules](#modules)\n- [Caveats](#caveats)\n- [Differences](#differences)\n\n## [Features](FEATURES.md)\n\n - [Array comprehension](FEATURES.md#array-comprehension)\n - [Arrow functions](FEATURES.md#arrow-functions)\n - [Classes](FEATURES.md#classes)\n - [Computed property names](FEATURES.md#computed-property-names)\n - [Constants](FEATURES.md#constants)\n - [Default parameters](FEATURES.md#default-parameters)\n - [Destructuring](FEATURES.md#destructuring)\n - [For-of](FEATURES.md#for-of)\n - [Generators](FEATURES.md#generators) via [regenerator](https://github.com/facebook/regenerator)\n - [Let scoping](FEATURES.md#let-scoping)\n - [Modules](FEATURES.md#modules)\n - [Numeric literals](FEATURES.md#numeric-literals)\n - [Property method assignment](FEATURES.md#property-method-assignment)\n - [Property name shorthand](FEATURES.md#property-name-shorthand)\n - [Rest parameters](FEATURES.md#rest-parameters)\n - [Spread](FEATURES.md#spread)\n - [Template literals](FEATURES.md#template-literals)\n - [Unicode regex](FEATURES.md#unicode-regex)\n\n## Usage\n\n### Plugins\n\n - [Broccoli](https://github.com/very-geek/broccoli-6to5-transpiler)\n - [Browserify](https://github.com/sebmck/6to5-browserify)\n - [Brunch](https://github.com/es128/6to5-brunch)\n - [Connect](https://github.com/sebmck/6to5-connect)\n - [Gulp](https://github.com/sindresorhus/gulp-6to5)\n - [Grunt](https://github.com/sindresorhus/grunt-6to5)\n - [Jade](https://github.com/Apoxx/jade-6to5)\n - [webpack](https://github.com/Couto/6to5-loader)\n\n### CLI\n\nCompile the file `script.js` and output it to stdout.\n\n    $ 6to5 script.js\n\nCompile the file `script.js` and output it to `script-compiled.js`.\n\n    $ 6to5 script.js --out-file script-compiled.js\n\nCompile the file `script.js` and output it to `script-compiled.js` and save a\nsource map to `script-compiled.js.map`.\n\n    $ 6to5 script.js --source-maps --out-file script-compiled.js\n\nCompile the file `script.js` and output it to `script-compiled.js` with a source\nmap embedded in a comment at the bottom.\n\n    $ 6to5 script.js --source-maps-inline --out-file script-compiled.js\n\nCompile the entire `src` directory and output it to the `lib` directory.\n\n    $ 6to5 src --out-dir lib\n\nPipe a file in via stdin and output it to `script-compiled.js`\n\n    $ 6to5 --out-file script-compiled.js < script.js\n\n#### Node\n\nLaunch a repl.\n\n    $ 6to5-node\n\nEvaluate code.\n\n    $ 6to5-node -e \"class Test { }\"\n\nCompile and run `test.js`.\n\n    $ 6to5-node test\n\n### Node\n\n```javascript\nvar to5 = require(\"6to5\");\n\nvar result = to5.transform(\"code();\", options);\nresult.code;\nresult.map;\nresult.ast;\n\nto5.transformFileSync(\"filename.js\", options).code;\n\nto5.transformFile(\"filename.js\", options, function (err, result) {\n\n});\n```\n\n##### Options\n\n```javascript\n{\n  // Filename for use in errors etc.\n  // Default: \"unknown\"\n  filename: \"filename\",\n\n  // List of transformers to EXCLUDE.\n  // Run `6to5 --help` to see a full list of transformers.\n  blacklist: [],\n\n  // List of transformers to ONLY use.\n  // Run `6to5 --help` to see a full list of transformers.\n  whitelist: [],\n\n  // Module formatter to use\n  // Run `6to5 --help` to see a full list of module formatters.\n  // Default: \"common\"\n  modules: \"common\",\n\n  // If truthy, adds a `map` property to returned output.\n  // If set to \"inline\", a comment with a sourceMappingURL directive is added to\n  // the bottom of the returned code.\n  // Default: false\n  sourceMap: true,\n\n  // Set `file` on returned source map.\n  // Default: `filename` option.\n  sourceMapName: \"filename\",\n\n  // Set `sources[0]` on returned source map.\n  // Default: `filename` option.\n  sourceFileName: \"filename\"\n}\n```\n\n#### Require hook\n\nAll subsequent files required by node with the extensions `.es6` and `.js` will\nbe transformed by 6to5. The polyfill specified in [Polyfill](#polyfill) is also\nrequired.\n\n```javascript\nrequire(\"6to5/register\");\n```\n\n**NOTE:** By default all requires to `node_modules` will be ignored. You can\noverride this by passing an ignore regex via:\n\n```javascript\nrequire(\"6to5/register\")(/regex/);\n```\n\nYou can also customise the file extensions that the require hook will use via:\n\n```javascript\nrequire(\"6to5/register\")({\n  // optional ignore regex\n  ignoreRegex: /regex/,\n\n  // this will remove the currently hooked extensions of .es6 and .js so you'll\n  // have to add them back if you want them to be used again\n  extensions: [\".js\", \".es6\"]\n});\n```\n\n### Browser\n\nYou can build a browser version of the compiler by running the following in the\n6to5 directory:\n\n    $ make build\n\nThis will output the files `dist/6to5.js` and `dist/6to5.min.js`.\n\nJust include one of those in the browser and access the transform method via the\nglobal `to5`.\n\n```javascript\nto5(\"class Test {}\").code;\n```\n\n#### Test\n\nTo test 6to5 in your browser run:\n\n    $ make test-browser\n\nAnd open `test/browser.html` in your browser if it doesn't open automatically.\n\n## [Modules](MODULES.md)\n\nSee [Modules - Common](MODULES.md#common-default) for documentation on the\ndefault module formatting.\n\nAlternatively see [Modules](MODULES.md) for all other supported module formatting types.\n\n## Caveats\n\n### Polyfill\n\n6to5 does not include a runtime nor polyfill and it's up to the developer to\ninclude one in compiled browser code.\n\n#### Node\n\nA polyfill is included with the 6to5 module that can be included in node like\nso:\n\n```javascript\nrequire(\"6to5/polyfill\");\n```\n\nThis is simply a wrapper around the\n[regenerator runtime](https://github.com/facebook/regenerator/blob/master/runtime.js) and the\n[es6-shim](https://github.com/paulmillr/es6-shim) and\n[es6-symbol](https://github.com/medikoo/es6-symbol) polyfills.\n\n#### Browser\n\nIf you're planning on using 6to5 output in the browser then it's up to you\nto include polyfills. [es6-symbol](https://github.com/medikoo/es6-symbol#browser)\nand [es6-shim](https://raw.githubusercontent.com/paulmillr/es6-shim/master/es6-shim.js)\nfill the vast majority of polyfill concerns.\n\n### For-of\n\nA polyfill is required for for-of functionality that implements `Symbol` and\nadds `prototype[Symbol.iterator]` behaviour to built-ins. Using the polyfills\nspecified in [polyfill](#polyfill) suffices.\n\n### Classes\n\nBuilt-in classes such as `Date`, `Array` and `DOM` cannot be subclassed due to\nlimitations in ES5 implementations.\n\nIf you're inheriting from a class then static properties are inherited from it\nvia [\\_\\_proto\\_\\_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto),\nthis is widely supported but you may run into problems with much older browsers.\n\n### Generators\n\nThe [regenerator runtime](https://github.com/facebook/regenerator/blob/master/runtime.js)\nand an [ES6 polyfill](#polyfill) are required in order for generators to work.\n\n## Differences\n\n### Philosophy\n\nThe fundamental concept behind 6to5 is that the generated code must be close as\npossible to the original, retaining all the same formatting and readability.\n\nMany other transpilers are just concerned with making the code work while 6to5\nis concerned with making sure it works **and** is readable at the same time.\n\nFor example, given the following array comprehension:\n\n```javascript\nvar seattlers = [for (c of customers) if (c.city == \"Seattle\") { name: c.name, age: c.age }];\n```\n\nis generated to the following with 6to5:\n\n```javascript\nvar seattlers = customers.filter(function (c) {\n  return c.city == \"Seattle\";\n}).map(function (c) {\n  return {\n    name: c.name,\n    age: c.age\n  };\n});\n```\n\nThe following is what Traceur generates:\n\n```javascript\nvar seattlers = (function() {\n  var c;\n  var $__20 = 0,\n      $__21 = [];\n  for (var $__22 = customers[$traceurRuntime.toProperty(Symbol.iterator)](),\n      $__23; !($__23 = $__22.next()).done; ) {\n    c = $__23.value;\n    if (c.city == \"Seattle\")\n      $traceurRuntime.setProperty($__21, $__20++, {\n        name: c.name,\n        age: c.age\n      });\n  }\n  return $__21;\n}());\n```\n\nAs you can tell, it's not very pretty, unreadable even. Instead of mapping\ndirectly to a runtime, like other transpilers, 6to5 maps directly to the\nequivalent ES5.\n\nI'm not saying 6to5 is for everyone or even suited for everything. Traceur is\nbetter suited if you'd like a full ES6 environment with polyfills and all.\n\n### Comparison to other transpilers\n\n|                              | 6to5 | Traceur | esnext | es6now | es6-transpiler | jstransform |\n| ---------------------------- | ---- | ------- | ------ | ------ | -------------- | ----------- |\n| No runtime                   | ✓    |         |        |        | ✓              | ✓           |\n| Source maps                  | ✓    | ✓       | ✓      |        | ✓              | ✓           |\n| No compiler global pollution | ✓    |         | ✓      |        | ✓              | ✓           |\n| Arrow functions              | ✓    | ✓       | ✓      | ✓      | ✓              | ✓           |\n| Classes                      | ✓    | ✓       | ✓      | ✓      | ✓              | ✓           |\n| Computed property names      | ✓    | ✓       | ✓      | ✓      | ✓              |             |\n| Constants                    | ✓    | ✓       |        |        | ✓              |             |\n| Default parameters           | ✓    | ✓       | ✓      | ✓      | ✓              |             |\n| Destructuring                | ✓    | ✓       | ✓      | ✓      | ✓              | ✓           |\n| For-of                       | ✓    | ✓       | ✓      | ✓      | ✓              |             |\n| Generators                   | ✓    | ✓       | ✓      |        |                |             |\n| Let scoping                  | ✓    | ✓       |        |        | ✓              |             |\n| Modules                      | ✓    | ✓       |        | ✓      |                |             |\n| Property method assignment   | ✓    | ✓       | ✓      | ✓      | ✓              | ✓           |\n| Property name shorthand      | ✓    | ✓       | ✓      | ✓      | ✓              | ✓           |\n| Rest parameters              | ✓    | ✓       | ✓      | ✓      | ✓              | ✓           |\n| Spread                       | ✓    | ✓       | ✓      | ✓      | ✓              |             |\n| Template literals            | ✓    | ✓       | ✓      | ✓      | ✓              | ✓           |\n| Unicode regex                | ✓    | ✓       |        |        | ✓              |             |\n\n#### [Traceur](https://github.com/google/traceur-compiler)\n\nTraceur requires quite a bulky runtime (~75KB) and produces quite verbose code.\nWhile this can be trimmed down by selectively building the runtime, it's an\nunneccesary step when a runtime can be eliminated entirely.\n\n#### [es6now](https://github.com/zenparsing/es6now)\n\nes6now doesn't output sourcemaps. This is cited as a positive as line-to-line\nmapping is the goal. This however obviously doesn't retain column mapping\nresulting in the output code not being very pleasant.\n\n#### [es6-transpiler](https://github.com/termi/es6-transpiler)\n\nThe es6-transpiler compiler requires shims to operate which pollutes the global\nscope resulting in possible collisions.\n\nes6-transpiler maps line-by-line, just like es6now, this results in the same\nissues such as lack of column information and unpleasant code output.\n",
  "readmeFilename": "README.md",
  "_id": "6to5@1.10.6",
  "dist": {
    "shasum": "7dfddc2adba10c072bfaedd7f48cefc8e6d7207f"
  },
  "_from": "6to5@^1.0.0",
  "_resolved": "https://registry.npmjs.org/6to5/-/6to5-1.10.6.tgz"
}
